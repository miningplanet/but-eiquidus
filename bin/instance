#!/usr/bin/env node
const debug = require('debug')('debug')
const settings = require('../lib/settings')
const detect = require('detect-port')
const db = require('../lib/database')
const app = require('../app')

const networks = settings.getAllNet()

app.set('port', process.env.PORT || settings.webserver.port)

// init db for default chain (must be present and cannot be disabled)
db.connection_factory(networks[0], settings.getDbConnectionString(networks[0]), function(conn) {
  db.initialize_data_startup(function() {
    var port = app.get('port')
    networks.forEach( function(item, index) {
      if (index > 0) {
        const enabled = settings.getDbOrNull(item).enabled
        if (enabled) {
          db.connection_factory(item, settings.getDbConnectionString(networks[index]), function(conn) {
            db.initialize_data_startup(function() {
              if (index == networks.length -1) {
                detect(port).then(function(result) {
                  console.log('Detected port %s.', result)
                  if (port !== result -1) {
                    console.log('Starting...')
                    var server = app.listen(app.get('port'), '::', function() {
                      console.log('\n*** but-x listening on port %d ***\n', server.address().port)
                    })
                    process.on('SIGINT', () => {
                      console.log('Stopping...')
                      server.close(() => {
                        var mongoose = require('mongoose')
                        mongoose.connection.close(false).then(() => {
                          // close the main process now that all http and database connections have closed
                          console.log('Exit...')
                          process.exit(0)
                        }).catch((err) => {
                          console.log(err)
                          process.exit(1)
                        })
                      })
                    })
                  }
                })
              }
            }, item)
          })
        }
      }
    })
  }, networks[0])
})

module.exports = {
  db: db
}